searchState.loadedDescShard("iroh_willow", 0, "Implementation of willow\nThe ALPN protocol name for iroh-willow.\nEngine for driving a willow store and synchronisation …\nStructs that allow constructing entries and other structs …\nTypes for defining synchronisation interests.\nProtocol data types used in willow.\nThe <code>session</code> module contains an implementation of the …\nStore for entries, secrets, and capabilities used in the …\nVarious utilities and data structures used in this crate.\nCustomize what to do with incoming connections.\nHandle to a Willow storage thread.\nThe <code>Engine</code> is the main handle onto a Willow store with …\nRegisters a callback to determine the fate of incoming …\nGet an in memory client to interact with the willow engine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle an incoming connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShutdown the engine.\nStart the Willow engine.\nSynchronises with a peer.\nRegisters an event channel for events from accepted …\nUse any available capability which covers the entry and …\nSelect which capability to use for authenticating a new …\nImport data from the provided bytes and set as payload.\nCreates an entry while setting some fields automatically.\nEither a <code>Entry</code> or a <code>EntryForm</code>.\nUse the provided <code>WriteCapability</code>.\nSet the subspace to the provided <code>SubspaceId</code>.\nSet the timestamp to the provided value.\nImport data from a file on the node’s local file system …\nSet the payload hash directly. The blob must exist in the …\nSet the payload hash directly. The blob must exist in the …\nSet the timestamp to the current system time.\nSources where payload data can come from.\nImport data from a <code>AsyncRead</code> and set as payload.\nImport data from a <code>Stream</code> of bytes and set as payload.\nSet the subspace either to a provided <code>SubspaceId</code>, or use …\nSet the timestamp either to the provided <code>Timestamp</code> or to …\nSet the subspace to the <code>UserId</code> of the user authenticating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EntryForm</code> where the subspace is set to the …\nSets the subspace for the entry.\nGet the user id of the user who is the receiver of the …\nUse all the capabilities we have.\nThe receiver may be any user for which we have a secret …\nSelector for an <code>AreaOfInterest</code>.\nSelector for the area to which a capability must grant …\nSelector for a capability.\nA serializable capability.\nUse any capability that covers the provided area.\nUse any capability that covers the provided point (i.e. …\nUse the specified set of <code>AreaOfInterest</code>.\nThe receiver must be the provided user.\nBuilder for <code>Interests</code>.\nEnum for describing synchronisation interests.\nHelper trait to accept both <code>Area</code> and <code>AreaOfInterest</code> in the …\nA read authorisation.\nUse the selected capabilities and areas.\nSelect the receiver for a capability.\nUse the widest area allowed by a capability, with no …\nUse the capability which covers the biggest area.\nA write authorisation.\nAdd a capability and areas of interest\nAdd a specific area included in one of our capabilities …\nAdd the full area of a capability we have into the …\nCreates interests that include all our capabilities.\nCreates a <code>CapSelector</code> which selects the widest capability …\nConverts this builder into <code>Interests</code>.\nReturns a <code>InterestBuilder</code> to build our <code>Interests</code>.\nSelect a capability which authorises writing the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the area to which the capability grants access.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the provided capability is matched by this …\nChecks whether the provided <code>Area</code> is matched by this …\nThe namespace to which the capability must grant access.\nCreates a new <code>CapSelector</code>.\nSelect the user who may use the capability.\nCreates a <code>CapSelector</code> which selects the widest capability …\nTypes for the basic data model of Willow.\nUtilities for Willow’s entry groupings.\nPublic-key crypto types for willow\nThe capability system of Willow.\nPrimitives for Private Area Intersection\nTypes and helpers for the Willow General Purpose Sync …\nAn entry in a willow store.\nSee <code>willow_data_model::Component</code>.\nOne of the path’s component is too large.\nThe byte length of a <code>PayloadDigest</code>.\nAn entry in a willow store.\nExtension methods for <code>Entry</code>.\nAn error arising from trying to construct a invalid <code>Path</code> …\nAn error arising from trying to construct a invalid <code>Path</code> …\nA natural number for limiting the number of path …\nA natural number for limiting the length of path …\nA natural number max_path_length for limiting the overall …\nA type for identifying namespaces.\nAn immutable Willow path.\nExtension methods for <code>Path</code>.\nThe path’s total length in bytes is too large.\nThe path’s total length in bytes is too large.\nA payload digest used in entries.\nThe capability type needed to authorize writes (serde …\nA type for identifying subspaces.\nA Timestamp is a 64-bit unsigned integer, that is, a …\nThe path has too many components.\nThe path has too many components.\nAn error indicating an <code>AuthorisationToken</code> does not …\nThe capability type needed to authorize writes.\nReturns a tuple of namespace, subspace and path.\nCertifies that an Entry may be written.\nDecodes an entry from a bytestring.\nEncodes the entry into a bytestring.\nDebug-format the path as a lossy UTF-8 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new path from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProves that the [<code>willow_data_model::Entry</code>] was created by …\n<code>AuthorisedEntry</code> wrapper that can be serialized with <code>serde</code>.\n<code>Entry</code> wrapper that can be serialized with <code>serde</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA value that signals that an [<code>Area</code>] includes Entries with …\nSee <code>willow_data_model::grouping::Area</code>.\nExtension methods for <code>Area</code>.\nSee <code>willow_data_model::grouping::AreaOfInterest</code>.\nExtension methods for <code>AreaOfInterest</code>.\nSee <code>willow_data_model::grouping::AreaSubspace</code>.\nA closed range consists of a start value and an end_value.\nA concrete [<code>SubspaceId</code>].\nAn open range consists only of a start value.\nA single point in the 3D range space.\nOne-dimensional grouping over a type of value.\nSee <code>willow_data_model::grouping::Range3d</code>.\nDetermines whether a <code>Range</code> is <em>closed</em> or <em>open</em>.\nTo be included in this [<code>AreaOfInterest</code>], an [<code>crate::Entry</code>] …\nA range includes all values strictly less than its end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new range which includes everything.\nReturn if the <code>RangeEnd</code> is greater than the given value.\nReturn whether a given value is included by the <code>Range</code> or …\nReturns <code>true</code> if the area contains <code>point</code>.\nReturns <code>true</code> if <code>other</code> range is fully included in this <code>Range</code>…\nCreate the intersection between this <code>Range</code> and another …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be included in this AreaOfInterest, an Entry’s …\nThe total payload_lengths of all included Entries is at …\nConstruct a range.\nConstruct a new closed range from a start and end_value, …\nConstruct a new open range from a start value.\nCreates a new area with <code>path</code> as prefix and no constraints …\nA range includes all values greater than or equal to its …\nConverts the area into a <code>Range3d</code>.\nCreates a new area of interest with the specified area and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommunal namespace.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\n<code>NamespacePublicKey</code> in bytes\nThe type of the namespace, either communal or owned.\nThe corresponding public key for a `NamespaceSecretKey.\nNamespace secret key.\nThe signature obtained by signing a message with a …\nOwned namespace.\n<code>UserPublicKey</code> in bytes\nThe corresponding public key for a `UserSecretKey.\nUser secret key.\nThe signature obtained by signing a message with a …\nGet this <code>NamespaceId</code> as a byte slice.\nGet this <code>UserId</code> as a byte slice.\nConvert to byte slice.\nConvert to byte slice.\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nConvert to a hex string limited to the first 10 bytes for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a `NamespaceSecretKey from a byte array.\nCreate from a slice of bytes.\nCreate from a byte slice.\nCreate from a slice of bytes.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate a new, random [<code>NamespaceSecretKey] with an encoded [</code>…\nCreate a new <code>UserSecretKey</code> with a random key.\nGet the <code>NamespaceId</code> for this namespace.\nConvert into a <code>NamespaceId</code>.\nGet the <code>UserId</code> for this author.\nConvert into a <code>UserId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>UserPublicKey</code>.\nConvert into <code>NamespacePublicKey</code>.\nGet the <code>NamespacePublicKey</code> for this namespace.\nGet the <code>UserPublicKey</code> for this author.\nSign a message with this `NamespaceSecretKey key.\nSign a message with this <code>UserSecretKey</code> key.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nStrictly verify a signature on a message with this `…\nVerify that a signature matches the <code>msg</code> bytes and was …\nStrictly verify a signature on a message with this …\nVerify that a signature matches the <code>msg</code> bytes and was …\nA mode granting read or write access to some <code>Area</code>.\nThe granted area of the capability we tried to delegate …\nMaps namespace public keys to booleans, determining …\nRepresents an authorisation to read an area of data in a …\nThe given secret did not correspond to the receiver of the …\nCertifies that an Entry may be written.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> covers a larger area than <code>other</code>, or …\nProves that the [<code>willow_data_model::Entry</code>] was created by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogical channel for controlling the binding of new …\nResource handle for <code>crate::proto::grouping::AreaOfInterest</code>…\nLogical channel for controlling the binding of new …\nResource handle for …\nComplete the commitment scheme to determine the challenge …\nAllow the other peer to reduce its total buffer capacity …\nThe server notifies the client that it has started …\nThe client notifies the server that it can stop dropping …\nAsk the other peer to free a resource handle.\nMake a binding promise of available buffer capacity to the …\nAsk the other peer to send an ControlAbsolve message such …\nLogical channel for transmitting Entries and Payloads …\nTransmit an AuthorisedEntry to the other peer, and …\nTransmit some transformed Payload bytes.\nExpress preferences for Payload transfer in the …\nThe different resource handles employed by the WGPS.\nLogical channel for controlling the binding of new …\nResource handle for the private set intersection part of …\nAn Entry together with information about how much of its …\nThe different logical channels employed by the WGPS.\nAn iterator over the variants of LogicalChannel\nThe maximum payload size limits when the other peer may …\nBind data to an IntersectionHandle for performing private …\nFinalise private set intersection for a single item.\nSend a previously requested SubspaceCapability.\nAsk the receiver to send a SubspaceCapability.\nResource handle that controls the matching from Payload …\nWhereas write access control is baked into the Willow data …\nLogical channel for performing 3d range-based set …\nPrepare transmission of the LengthyEntries a peer has in a …\nTransmit a <code>LengthyEntry</code> as part of 3d range-based set …\nSend a Fingerprint as part of 3d range-based set …\nTransmit some transformed Payload bytes.\nIndicate that no more bytes will be transmitted for the …\nBind an AreaOfInterest to an AreaOfInterestHandle.\nBind a ReadCapability to a CapabilityHandle.\nBind a StaticToken to a StaticTokenHandle.\nLogical channel for controlling the binding of new …\nResource handle for <code>super::StaticToken</code>s that peers need to …\nWhenever a peer is granted a complete read capability of …\nAn AreaOfInterest that the peer wishes to reference in …\nA CapabilityHandle bound by the sender that grants access …\nThe number of consecutive bytes from the start of the …\nA ReadCapability that the peer wishes to reference in …\nA SubspaceCapability whose granted namespace corresponds …\nIf this message is the last of a set of messages that …\nIf this message is the last of a set of messages that …\nThe dynamic part of the entry’s AuthorisationToken.\nThe DynamicToken of the Entry to transmit.\nThe Entry in question.\nThe LengthyEntry itself.\nThe Entry to transmit.\nThe Fingerprint of the range, that is, of all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe result of first applying hash_into_group to some …\nThe result of performing scalar multiplication between the …\nThe IntersectionHandle, bound by the sender, of the …\nThe IntersectionHandle of the PaiBindFragment message …\nThe IntersectionHandle bound by the sender for the …\nThe handle of the PaiRequestSubspaceCapability message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTrue if and only if the the sender has zero Entries in the …\nTrue if and only if no further ReconciliationSendEntry …\nSet to true if the private set intersection item is a …\nThe nonce of the sender, encoded as a big-endian unsigned …\nThe offset in the Payload in bytes at which Payload …\nThe 3dRange whose Fingerprint is transmitted.\nThe 3dRange whose LengthyEntries to transmit.\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nThe SyncSignature issued by the Receiver of the capability …\nThe SyncSubspaceSignature issued by the receiver of the …\nThe StaticToken to bind.\nA StaticTokenHandle, bound by the sender of this message, …\nA <code>StaticTokenHandle</code> bound to the StaticToken of the Entry …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA boolean flag to indicate whether the sender wishes to …\nWhether the sender promises to send the Entries in the …\nAPI for managing iroh spaces\nIroh Willow client.\nForm to insert a new entry\nReceives events for a reconciliation intent.\nError returned when trying to insert a <code>SyncHandle</code> into a `…\nType alias for a memory-backed client.\nA space to store entries in.\nA ticket to import and sync a space.\nHandle to a synchronization intent.\nMerges synchronisation intent handles into one struct.\nCompletion state for a <code>SyncHandle</code>.\nSends updates into a reconciliation intent.\nSubmit new synchronisation interests into the session.\nSubmit new synchronisation interests into all sessions.\nAdds a known node address to this node.\nThe authorisation, either an exact capability, or a user …\nCapabilities for a space.\nWaits for the intent to be completed.\nWait for all intents to complete.\nCreate a new namespace in the Willow store.\nCreate a new user in the Willow store.\nDelegate capabilities to another user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet entries by range.\nGet a single entry.\nImport a ticket and start to synchronize.\nImport capabilities.\nImport a secret into the Willow store.\nIngest an authorised entry.\nAdd a sync intent to the set.\nInserts a new entry, with the payload imported from a byte …\nInserts a new entry, with the payload set to the hash of a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the identifier for this space.\nCreates a new entry form with the specified user and path.\nFetches the <code>NodeAddr</code> for this node.\nList of nodes to sync with.\nThe path\nRemoves a sync intent from the set.\nResume a subscription using a progress ID obtained from a …\nShare access to this space, or parts of this space, with …\nSplits the <code>SyncHandle</code> into a update sender sink and event …\nSubscribe to events concerning entries included by an <code>Area</code>.\nThe subspace, either exact or automatically set to the …\nSync with a peer and keep sending and receiving live …\nSyncs with a peer and quit the session after a single …\nSynchronize with a peer.\nThe timestamp, either exact or automatically set current …\nMake sure the hash is available in the blob store, and use …\nEither a complete <code>Entry</code> or a <code>FullEntryForm</code>.\nContains the error value\nCreates an entry while setting some fields automatically.\nContains the success value\nOptions for setting the payload on the a new entry.\nThe RPC service type for the spaces protocol.\nInsert with the specified hash and length, without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the inserted entry, or an error if the entry was …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe peer that initiated the synchronisation session.\nThe peer that accepted the synchronisation session.\nRun reconciliations and data mode, until intentionally …\nRun a single, full reconciliation, and then quit.\nTo break symmetry, we refer to the peer that initiated the …\nOptions to initialize a session.\nA session can either run a single reconciliation, or keep …\nCreates a new <code>SessionInit</code> with <code>SessionMode::Continuous</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntents are handles onto a Willow synchronisation session.\nSelects the areas we wish to synchronize.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we initiated the session.\nReturns <code>true</code> if we accepted the session.\nReturns <code>true</code> if the session runs in live mode.\nSelects the session mode (once or continuous).\nCreates a new <code>SessionInit</code> with <code>SessionMode::ReconcileOnce</code>.\nThe session was closed with an error.\nSubmit new interests into the session.\nWe found an intersection between our and the peer’s …\nClose the intent.\nAll interests were reconciled.\nOutcome of driving an intent to completion.\nEvents emitted from a session for an synchronisation …\nA synchronisation intent.\nHandle to a <code>Intent</code>.\nUpdates that may be submitted from an intent into the …\nWe found an intersection between our and the peer’s …\nNo interests were reconciled.\nSome interests were reconciled.\nWe reconciled an area.\nWe reconciled all interests submitted in this intent.\nSubmit new synchronisation interests into the session.\nClose the intent.\nWait for the intent to be completed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the namespace if the event is related to a …\nCreate a new intent with associated handle.\nCreate a new detached intent.\nAbort the intent.\nSplit the <code>IntentHandle</code> into a update sink and event stream.\nSerializable version of EventKind\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn-memory storage implementation for testing purposes.\nTraits for storage backends for the Willow store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate or open a store from a <code>path</code> to a database file.\nCapability storage.\nThe origin of an entry ingestion event.\nRead-only interface to <code>EntryStorage</code>.\nStorage for entries.\nA new entry was ingested.\nThe entry was probably created on this machine.\nDescribes an <code>AuthorisedEntry</code> which was pruned and the …\nAn entry was pruned via prefix pruning.\nThe entry was sourced from another device, e.g. a …\nStorage for user and namespace secrets.\nError returned from <code>SecretStorage</code>.\nStorage backend.\nAn event which took place within a <code>EntryStorage</code>. Each …\nDescribes which entries to ignore during a query.\nThe entry which triggered the pruning.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOmit entries whose payload is the empty string.\nOmit entries whose origin is this remote.\nIngest a new entry.\nOnly emit ingestion events.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the event is included in the <code>area</code> and not …\nUp to how many values to send immediately, before sending …\nAttempt to resume a subscription using a <em>progress ID</em> …\n<code>k</code> in the protocol, how many splits to generate. at least 2\nSubscribe to events concerning entries included by an […\nTraits for encoding and decoding values to and from bytes.\nIncrement a fixed-length byte string by one, by …\nA simple asynchronous queue.\nAsynchronous reader to read bytes from a channel.\nAsynchronous writer to write bytes into a channel.\nAdd guarantees available for sending messages.\nClose the channel.\nClose the channel.\nClose the channel.\nClose the channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new channel with a byte <code>Writer</code> on the transmit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the maximum buffer size of the channel.\nCreate a new channel with a message <code>Sender</code> on the transmit …\nRead a chunk of bytes from the channel.\nReceive the next message from the channel.\nSend a message into the channel.\nThe outcome of <code>Decoder::decode_from</code>\nDecoded a value.\nTrait for decoding values from bytes.\nTrait for encoding values into bytes.\nNot enough data to decode the value.\nDecode <code>Self</code> from a byte slice.\nEncode <code>Self</code> into a vector of bytes.\nEncode <code>Self</code> into a writable buffer which implements …\nReturns the length (in bytes) of the encoded value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bytes used for decoding the value.\nThe decoded value.\nWraps a <code>Gen</code> into a <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe reader returned from <code>chunked_pipe</code>.\nThe writer returned from <code>chunked_pipe</code>.\nIn-memory local-io async pipe between a <code>AsyncStreamWriter</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple unbounded FIFO queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to pop the next item from the front of the queue.\nPush a new item to the back of the queue.\nWrapper around <code>Stream</code> that takes a cancel token to cancel …\nWrapper around <code>ReceiverStream</code> that can be closed with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current system time in microseconds since …")